// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkIfTokenIsBlacklisted = `-- name: CheckIfTokenIsBlacklisted :one
SELECT jti, exp
FROM issued_refresh_tokens_blacklist
WHERE jti = $1
`

func (q *Queries) CheckIfTokenIsBlacklisted(ctx context.Context, jti pgtype.UUID) (IssuedRefreshTokensBlacklist, error) {
	row := q.db.QueryRow(ctx, checkIfTokenIsBlacklisted, jti)
	var i IssuedRefreshTokensBlacklist
	err := row.Scan(&i.Jti, &i.Exp)
	return i, err
}

const getAuthenticUserWithEmail = `-- name: GetAuthenticUserWithEmail :one
SELECT id, email, password
FROM users
WHERE email = $1
`

type GetAuthenticUserWithEmailRow struct {
	ID       pgtype.UUID
	Email    string
	Password string
}

func (q *Queries) GetAuthenticUserWithEmail(ctx context.Context, email string) (GetAuthenticUserWithEmailRow, error) {
	row := q.db.QueryRow(ctx, getAuthenticUserWithEmail, email)
	var i GetAuthenticUserWithEmailRow
	err := row.Scan(&i.ID, &i.Email, &i.Password)
	return i, err
}

const getAuthenticUserWithID = `-- name: GetAuthenticUserWithID :one
SELECT id, email
FROM users
WHERE id = $1
`

type GetAuthenticUserWithIDRow struct {
	ID    pgtype.UUID
	Email string
}

func (q *Queries) GetAuthenticUserWithID(ctx context.Context, id pgtype.UUID) (GetAuthenticUserWithIDRow, error) {
	row := q.db.QueryRow(ctx, getAuthenticUserWithID, id)
	var i GetAuthenticUserWithIDRow
	err := row.Scan(&i.ID, &i.Email)
	return i, err
}

const insertNewUser = `-- name: InsertNewUser :exec
INSERT INTO users
(id, firstname, lastname, email, password)
VALUES ($1, $2, $3, $4, $5)
`

type InsertNewUserParams struct {
	ID        pgtype.UUID
	Firstname string
	Lastname  string
	Email     string
	Password  string
}

func (q *Queries) InsertNewUser(ctx context.Context, arg InsertNewUserParams) error {
	_, err := q.db.Exec(ctx, insertNewUser,
		arg.ID,
		arg.Firstname,
		arg.Lastname,
		arg.Email,
		arg.Password,
	)
	return err
}

const insertRefreshToken = `-- name: InsertRefreshToken :exec
INSERT INTO issued_refresh_tokens 
(sub, jti, exp, iat) 
VALUES ($1, $2, $3, $4)
`

type InsertRefreshTokenParams struct {
	Sub pgtype.UUID
	Jti pgtype.UUID
	Exp pgtype.Timestamptz
	Iat pgtype.Timestamptz
}

func (q *Queries) InsertRefreshToken(ctx context.Context, arg InsertRefreshTokenParams) error {
	_, err := q.db.Exec(ctx, insertRefreshToken,
		arg.Sub,
		arg.Jti,
		arg.Exp,
		arg.Iat,
	)
	return err
}

const insertStripeInfo = `-- name: InsertStripeInfo :exec
INSERT INTO stripe_info 
(user_id, stripe_customer_id, stripe_subscription_id, stripe_payment_method_id)
VALUES ($1, $2, $3, $4)
`

type InsertStripeInfoParams struct {
	UserID                pgtype.UUID
	StripeCustomerID      string
	StripeSubscriptionID  string
	StripePaymentMethodID string
}

func (q *Queries) InsertStripeInfo(ctx context.Context, arg InsertStripeInfoParams) error {
	_, err := q.db.Exec(ctx, insertStripeInfo,
		arg.UserID,
		arg.StripeCustomerID,
		arg.StripeSubscriptionID,
		arg.StripePaymentMethodID,
	)
	return err
}

const insertTokenToBlackList = `-- name: InsertTokenToBlackList :exec
INSERT INTO issued_refresh_tokens_blacklist 
(jti, exp) 
VALUES ($1, $2)
`

type InsertTokenToBlackListParams struct {
	Jti pgtype.UUID
	Exp pgtype.Timestamptz
}

func (q *Queries) InsertTokenToBlackList(ctx context.Context, arg InsertTokenToBlackListParams) error {
	_, err := q.db.Exec(ctx, insertTokenToBlackList, arg.Jti, arg.Exp)
	return err
}

const insertUnverifiedUser = `-- name: InsertUnverifiedUser :exec
INSERT INTO unverified_users
(id, email, verification_code)
VALUES ($1, $2, $3)
`

type InsertUnverifiedUserParams struct {
	ID               pgtype.UUID
	Email            string
	VerificationCode string
}

func (q *Queries) InsertUnverifiedUser(ctx context.Context, arg InsertUnverifiedUserParams) error {
	_, err := q.db.Exec(ctx, insertUnverifiedUser, arg.ID, arg.Email, arg.VerificationCode)
	return err
}
